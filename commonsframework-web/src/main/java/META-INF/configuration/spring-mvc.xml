<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       ">
    <description>spring全局配置</description>
    
    <!-- 加载属性文件 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:spring-mvc.properties"/>
   
    
    <!-- Annotation自动注册Bean，在springMvc中只扫描@Controller注解 -->
    <context:component-scan base-package="cn.singno" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.validation.annotation.Validated"/>
    </context:component-scan>
    
    <!-- 消息转化器 -->
    <bean id="byteArrayHttpMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
    <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter" >
        <constructor-arg value= "UTF-8"/>
        <property name= "supportedMediaTypes">
            <list>
                <value>${web.mediaType.html.type}</value >
                <value>${web.mediaType.text.type}</value >
            </list>
        </property>
    </bean >
    <!-- JSON支持，避免IE执行AJAX时,返回JSON出现下载文件 -->
    <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter" >
        <property name= "supportedMediaTypes">
            <list>
                <value>${web.mediaType.html.type}</value >
                <value>${web.mediaType.text.type}</value >
                <value>${web.mediaType.json.type}</value >
            </list>
        </property>
        <property name="features">
	      	<array value-type="com.alibaba.fastjson.serializer.SerializerFeature">
	        	<value>DisableCircularReferenceDetect</value>
	      	</array>
	    </property>
    </bean >
    <bean id="DisableCircularReferenceDetect" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    	<property name="staticField" value="com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect"></property>
	</bean>

	<!-- ConversionService -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<set>
				<!-- 将String转换成XSS安全的String -->
				<bean class="cn.singno.commonsframework.converter.StringToPreventXssStringConverter" />
			</set>
		</property>
		<!-- 格式化 -->
		<property name="formatterRegistrars">
			<set>
				<!-- 开启@DateTimeFormat注解格式化功能 -->
				<bean class="org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar">
					<property name="dateFormatter">
						<bean class="org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean" />
					</property>
				</bean>
			</set>
		</property>
	</bean>
	
	<!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 注册方法验证后置处理器 -->
	<bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor">
		<property name="validator" ref="validator" />
	</bean>

	<!-- 指定自己定义的validator -->
	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
    <mvc:annotation-driven validator="validator" conversion-service="conversionService" >
    	<!-- 注册消息转化器 -->
        <mvc:message-converters register-defaults="false" >
            <ref bean= "byteArrayHttpMessageConverter" />
            <ref bean= "stringHttpMessageConverter" />
            <ref bean= "fastJsonHttpMessageConverter" />
        </mvc:message-converters>
        <!-- 注册方法参数解析器 -->
        <mvc:argument-resolvers>
            <bean class="cn.singno.commonsframework.bind.method.CurrentUserMethodArgumentResolver"/>
        </mvc:argument-resolvers>
    </mvc:annotation-driven >
	
    
    <!-- 拦截器 -->
    <!-- <mvc:interceptors>
    	<mvc:interceptor >
    		<mvc:mapping path="**"/>
    		<ref bean="***"/>
    	</mvc:interceptor>
    </mvc:interceptors> -->
    
    <mvc:interceptors>
    	<!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 --> 
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="language" />
		</bean>
	</mvc:interceptors>
    
    
    <!-- 对静态资源文件的访问控制  -->
    <!-- 
    	将无法mapping到Controller的path交给default servlet handler处理
    	当在web.xml 中   DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源
    -->
    <!-- <mvc:default-servlet-handler/> -->
    <mvc:resources mapping="/static/**" location="/WEB-INF/static/"/>
    
    <!-- 全局异常处理器 -->
    <bean id="globalExcaptionResolver" class=" cn.singno.commonsframework.exception.handler.GlobalExcaptionResolver">
    	<property name="jsonMessageConverter" ref="fastJsonHttpMessageConverter" />
    	<property name="order" value="1"/>
    </bean>
    
    
    <!-- beans -->
    <!-- 内部资源视图解析器配置 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    	<property name="order" value="1"/>
        <property name="prefix" value="${web.view.prefix}"/>
        <property name="suffix" value="${web.view.suffix}"/>
    </bean>
    
    <!-- 将bean validation的消息查找委托给spring的messageSource -->
	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:messages</value>
				<value>classpath:org/hibernate/validator/ValidationMessages</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="${web.message.useCodeAsDefaultMessage}" />
		<property name="defaultEncoding" value="${web.encode}" />
		<property name="cacheSeconds" value="${web.message.cacheSeconds}" />
	</bean>
	
	<!-- cookie的国际化实现 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="cookieName" value="${web.message.cookieName}" />
		<property name="cookieMaxAge" value="${web.message.cookieMaxAge}" />
		<property name="defaultLocale" value="${web.message.defaultLocale}" />
	</bean>
    
    <!-- 文件上传支持 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="${web.encode}"/>
        <!-- 设置允许上传的最大文件大小，以字节为单位计算。当设为-1时表示无限制，默认是-1 -->
        <property name="maxUploadSize" value="${web.upload.max.size}"/>
        <!-- 设置在文件上传时允许写到内存中的最大值，以字节为单位计算，默认是10240 -->
        <property name="maxInMemorySize" value="${web.upload.memory}"/>
    </bean>
    
   <!--  <import resource="classpath:spring-mvc-shiro.xml"/> -->
</beans>
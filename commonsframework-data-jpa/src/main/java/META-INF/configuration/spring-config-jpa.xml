<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd  
       ">

	
	<!-- 读取jdbc.properties文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:dbconfig.properties" />
	
	<!-- 配置 druid 数据源 -->
	<bean name="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<property name="maxWait" value="${druid.maxWait}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${druid.maxOpenPreparedStatements}" />
		<property name="removeAbandoned" value="${druid.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${druid.logAbandoned}" />
		<property name="filters" value="${druid.filters}" />
	</bean>

	<!-- master -->
	<bean id="writeDataSource" parent="parentDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${db.write.url}" />
		<property name="username" value="${db.write.username}" />
		<property name="password" value="${db.write.password}" />
		<property name="driverClassName" value="${db.write.driverClassName}" />
	</bean>
	
	<!-- slave -->
	<bean id="readDataSource1" parent="parentDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${db.read.url}" />
		<property name="username" value="${db.read.username}" />
		<property name="password" value="${db.read.password}" />
		<property name="driverClassName" value="${db.read.driverClassName}" />
	</bean>

	<!-- 读写分离数据源 -->
	<bean id="readWriteDataSource" class="cn.singno.commonsframework.data.jpa.bean.DynamicDataSource">
		<property name="writeDataSource" ref="writeDataSource" />
		<property name="readDataSourceMap">
			<map>
				<!-- 支持多个 read库做读操作 -->
				<entry key="readDataSource1" value-ref="writeDataSource" />
				<!-- <entry key="readDataSource2" value-ref="readDataSource1" />
				<entry key="readDataSource3" value-ref="readDataSource1" /> -->
			</map>
		</property>
	</bean>

	<!-- 定义实体管理器工厂 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- 加载数据源 -->
		<property name="dataSource" ref="readWriteDataSource" />
		<!-- 扫描实体类 -->
		<property name="packagesToScan" value="cn.singno.commonsframework.module.*.entity" />
		<!--指定实现JPA的适配器 -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<!-- 配置设置 -->
		<property name="jpaProperties">
			<props>
				<!-- 二级缓存配置 -->
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.provider_class">${provider_class}</prop>
				<!-- <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop> -->
				<!-- <prop key="hibernate.memcached.servers">${memcached_servers}</prop> -->
				<prop key="hibernate.cache.use_minimal_puts">${hibernate.cache.use_minimal_puts}</prop>
				<!-- 基本配置 -->
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">${hibernate.jdbc.use_scrollable_resultset}</prop>
				<prop key="hibernate.order_updates">${hibernate.order_updates}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<!-- 调试配置 -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
			</props>
		</property>
	</bean>

	<!-- 扫描 base-package 指定的包目录及其子目录，为继承 Repository 或其子接口的接口创建代理对象，并将代理对象注册为 Spring Bean -->
	<jpa:repositories 
		base-package="cn.singno.commonsframework.module.*.dao" 
		repository-impl-postfix="Impl"
		factory-class="cn.singno.commonsframework.data.jpa.factory.GenericDaoFactoryBean"
		entity-manager-factory-ref="entityManagerFactory" 
		transaction-manager-ref="transactionManager"/>
	
	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="execute*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="login*" propagation="REQUIRED" rollback-for="java.lang.Exception" />

			<tx:method name="list*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="search*" read-only="true" />
			<tx:method name="check*" read-only="true" />
			<tx:method name="is*" read-only="true" />
			<tx:method name="has*" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<!--事务管理 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<bean id="dynamicDataSourceProcessor" class="cn.singno.commonsframework.data.jpa.bean.DynamicDataSourceProcessor" />
	
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* cn.singno.commonsframework..*ServiceImpl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
		<aop:aspect ref="dynamicDataSourceProcessor" order="-2147483648">
			<aop:around method="changeDataSource" pointcut-ref="transactionPointcut"/>
		</aop:aspect>
	</aop:config>
</beans>